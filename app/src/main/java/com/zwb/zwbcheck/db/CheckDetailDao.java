package com.zwb.zwbcheck.db;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.zwb.zwbcheck.bean.CheckDetail;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHECK_DETAIL".
*/
public class CheckDetailDao extends AbstractDao<CheckDetail, Long> {

    public static final String TABLENAME = "CHECK_DETAIL";

    /**
     * Properties of entity CheckDetail.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property UniqueNum = new Property(1, Long.class, "uniqueNum", false, "UNIQUE_NUM");
        public final static Property Billno = new Property(2, String.class, "billno", false, "BILLNO");
        public final static Property Shelf = new Property(3, String.class, "shelf", false, "SHELF");
        public final static Property Location = new Property(4, String.class, "location", false, "LOCATION");
        public final static Property Goodscode = new Property(5, String.class, "goodscode", false, "GOODSCODE");
        public final static Property Goodsname = new Property(6, String.class, "goodsname", false, "GOODSNAME");
        public final static Property Barcode = new Property(7, String.class, "barcode", false, "BARCODE");
        public final static Property Simbarcode = new Property(8, String.class, "simbarcode", false, "SIMBARCODE");
        public final static Property Colorid = new Property(9, String.class, "colorid", false, "COLORID");
        public final static Property Colorcode = new Property(10, String.class, "colorcode", false, "COLORCODE");
        public final static Property Colorname = new Property(11, String.class, "colorname", false, "COLORNAME");
        public final static Property Sizeid = new Property(12, String.class, "sizeid", false, "SIZEID");
        public final static Property Sizecode = new Property(13, String.class, "sizecode", false, "SIZECODE");
        public final static Property Sizename = new Property(14, String.class, "sizename", false, "SIZENAME");
        public final static Property Qty = new Property(15, int.class, "qty", false, "QTY");
        public final static Property Stockqty = new Property(16, int.class, "stockqty", false, "STOCKQTY");
        public final static Property Scantime = new Property(17, String.class, "scantime", false, "SCANTIME");
        public final static Property Price = new Property(18, double.class, "price", false, "PRICE");
        public final static Property Account = new Property(19, double.class, "account", false, "ACCOUNT");
    }

    private Query<CheckDetail> checkMain_CheckDetailsQuery;

    public CheckDetailDao(DaoConfig config) {
        super(config);
    }
    
    public CheckDetailDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHECK_DETAIL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"UNIQUE_NUM\" INTEGER," + // 1: uniqueNum
                "\"BILLNO\" TEXT," + // 2: billno
                "\"SHELF\" TEXT," + // 3: shelf
                "\"LOCATION\" TEXT," + // 4: location
                "\"GOODSCODE\" TEXT," + // 5: goodscode
                "\"GOODSNAME\" TEXT," + // 6: goodsname
                "\"BARCODE\" TEXT," + // 7: barcode
                "\"SIMBARCODE\" TEXT," + // 8: simbarcode
                "\"COLORID\" TEXT," + // 9: colorid
                "\"COLORCODE\" TEXT," + // 10: colorcode
                "\"COLORNAME\" TEXT," + // 11: colorname
                "\"SIZEID\" TEXT," + // 12: sizeid
                "\"SIZECODE\" TEXT," + // 13: sizecode
                "\"SIZENAME\" TEXT," + // 14: sizename
                "\"QTY\" INTEGER NOT NULL ," + // 15: qty
                "\"STOCKQTY\" INTEGER NOT NULL ," + // 16: stockqty
                "\"SCANTIME\" TEXT," + // 17: scantime
                "\"PRICE\" REAL NOT NULL ," + // 18: price
                "\"ACCOUNT\" REAL NOT NULL );"); // 19: account
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHECK_DETAIL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CheckDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long uniqueNum = entity.getUniqueNum();
        if (uniqueNum != null) {
            stmt.bindLong(2, uniqueNum);
        }
 
        String billno = entity.getBillno();
        if (billno != null) {
            stmt.bindString(3, billno);
        }
 
        String shelf = entity.getShelf();
        if (shelf != null) {
            stmt.bindString(4, shelf);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(5, location);
        }
 
        String goodscode = entity.getGoodscode();
        if (goodscode != null) {
            stmt.bindString(6, goodscode);
        }
 
        String goodsname = entity.getGoodsname();
        if (goodsname != null) {
            stmt.bindString(7, goodsname);
        }
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(8, barcode);
        }
 
        String simbarcode = entity.getSimbarcode();
        if (simbarcode != null) {
            stmt.bindString(9, simbarcode);
        }
 
        String colorid = entity.getColorid();
        if (colorid != null) {
            stmt.bindString(10, colorid);
        }
 
        String colorcode = entity.getColorcode();
        if (colorcode != null) {
            stmt.bindString(11, colorcode);
        }
 
        String colorname = entity.getColorname();
        if (colorname != null) {
            stmt.bindString(12, colorname);
        }
 
        String sizeid = entity.getSizeid();
        if (sizeid != null) {
            stmt.bindString(13, sizeid);
        }
 
        String sizecode = entity.getSizecode();
        if (sizecode != null) {
            stmt.bindString(14, sizecode);
        }
 
        String sizename = entity.getSizename();
        if (sizename != null) {
            stmt.bindString(15, sizename);
        }
        stmt.bindLong(16, entity.getQty());
        stmt.bindLong(17, entity.getStockqty());
 
        String scantime = entity.getScantime();
        if (scantime != null) {
            stmt.bindString(18, scantime);
        }
        stmt.bindDouble(19, entity.getPrice());
        stmt.bindDouble(20, entity.getAccount());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CheckDetail entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Long uniqueNum = entity.getUniqueNum();
        if (uniqueNum != null) {
            stmt.bindLong(2, uniqueNum);
        }
 
        String billno = entity.getBillno();
        if (billno != null) {
            stmt.bindString(3, billno);
        }
 
        String shelf = entity.getShelf();
        if (shelf != null) {
            stmt.bindString(4, shelf);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(5, location);
        }
 
        String goodscode = entity.getGoodscode();
        if (goodscode != null) {
            stmt.bindString(6, goodscode);
        }
 
        String goodsname = entity.getGoodsname();
        if (goodsname != null) {
            stmt.bindString(7, goodsname);
        }
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(8, barcode);
        }
 
        String simbarcode = entity.getSimbarcode();
        if (simbarcode != null) {
            stmt.bindString(9, simbarcode);
        }
 
        String colorid = entity.getColorid();
        if (colorid != null) {
            stmt.bindString(10, colorid);
        }
 
        String colorcode = entity.getColorcode();
        if (colorcode != null) {
            stmt.bindString(11, colorcode);
        }
 
        String colorname = entity.getColorname();
        if (colorname != null) {
            stmt.bindString(12, colorname);
        }
 
        String sizeid = entity.getSizeid();
        if (sizeid != null) {
            stmt.bindString(13, sizeid);
        }
 
        String sizecode = entity.getSizecode();
        if (sizecode != null) {
            stmt.bindString(14, sizecode);
        }
 
        String sizename = entity.getSizename();
        if (sizename != null) {
            stmt.bindString(15, sizename);
        }
        stmt.bindLong(16, entity.getQty());
        stmt.bindLong(17, entity.getStockqty());
 
        String scantime = entity.getScantime();
        if (scantime != null) {
            stmt.bindString(18, scantime);
        }
        stmt.bindDouble(19, entity.getPrice());
        stmt.bindDouble(20, entity.getAccount());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CheckDetail readEntity(Cursor cursor, int offset) {
        CheckDetail entity = new CheckDetail( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // uniqueNum
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // billno
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // shelf
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // location
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // goodscode
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // goodsname
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // barcode
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // simbarcode
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // colorid
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // colorcode
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // colorname
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // sizeid
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // sizecode
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // sizename
            cursor.getInt(offset + 15), // qty
            cursor.getInt(offset + 16), // stockqty
            cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17), // scantime
            cursor.getDouble(offset + 18), // price
            cursor.getDouble(offset + 19) // account
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CheckDetail entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setUniqueNum(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setBillno(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setShelf(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLocation(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setGoodscode(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setGoodsname(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setBarcode(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSimbarcode(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setColorid(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setColorcode(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setColorname(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSizeid(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setSizecode(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSizename(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setQty(cursor.getInt(offset + 15));
        entity.setStockqty(cursor.getInt(offset + 16));
        entity.setScantime(cursor.isNull(offset + 17) ? null : cursor.getString(offset + 17));
        entity.setPrice(cursor.getDouble(offset + 18));
        entity.setAccount(cursor.getDouble(offset + 19));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CheckDetail entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CheckDetail entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CheckDetail entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "checkDetails" to-many relationship of CheckMain. */
    public List<CheckDetail> _queryCheckMain_CheckDetails(Long uniqueNum) {
        synchronized (this) {
            if (checkMain_CheckDetailsQuery == null) {
                QueryBuilder<CheckDetail> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.UniqueNum.eq(null));
                checkMain_CheckDetailsQuery = queryBuilder.build();
            }
        }
        Query<CheckDetail> query = checkMain_CheckDetailsQuery.forCurrentThread();
        query.setParameter(0, uniqueNum);
        return query.list();
    }

}
