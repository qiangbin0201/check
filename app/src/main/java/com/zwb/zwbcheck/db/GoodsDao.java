package com.zwb.zwbcheck.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zwb.zwbcheck.bean.Goods;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "GOODS".
*/
public class GoodsDao extends AbstractDao<Goods, Long> {

    public static final String TABLENAME = "GOODS";

    /**
     * Properties of entity Goods.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Goodscode = new Property(1, String.class, "goodscode", false, "GOODSCODE");
        public final static Property Goodsname = new Property(2, String.class, "goodsname", false, "GOODSNAME");
        public final static Property Barcode = new Property(3, String.class, "barcode", false, "BARCODE");
        public final static Property Simbarcode = new Property(4, String.class, "simbarcode", false, "SIMBARCODE");
        public final static Property Colorid = new Property(5, String.class, "colorid", false, "COLORID");
        public final static Property Colorcode = new Property(6, String.class, "colorcode", false, "COLORCODE");
        public final static Property Colorname = new Property(7, String.class, "colorname", false, "COLORNAME");
        public final static Property Sizeid = new Property(8, String.class, "sizeid", false, "SIZEID");
        public final static Property Sizecode = new Property(9, String.class, "sizecode", false, "SIZECODE");
        public final static Property Sizename = new Property(10, String.class, "sizename", false, "SIZENAME");
        public final static Property Stockqty = new Property(11, int.class, "stockqty", false, "STOCKQTY");
        public final static Property Price = new Property(12, double.class, "price", false, "PRICE");
        public final static Property Downtime = new Property(13, String.class, "downtime", false, "DOWNTIME");
    }


    public GoodsDao(DaoConfig config) {
        super(config);
    }
    
    public GoodsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"GOODS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"GOODSCODE\" TEXT," + // 1: goodscode
                "\"GOODSNAME\" TEXT," + // 2: goodsname
                "\"BARCODE\" TEXT," + // 3: barcode
                "\"SIMBARCODE\" TEXT," + // 4: simbarcode
                "\"COLORID\" TEXT," + // 5: colorid
                "\"COLORCODE\" TEXT," + // 6: colorcode
                "\"COLORNAME\" TEXT," + // 7: colorname
                "\"SIZEID\" TEXT," + // 8: sizeid
                "\"SIZECODE\" TEXT," + // 9: sizecode
                "\"SIZENAME\" TEXT," + // 10: sizename
                "\"STOCKQTY\" INTEGER NOT NULL ," + // 11: stockqty
                "\"PRICE\" REAL NOT NULL ," + // 12: price
                "\"DOWNTIME\" TEXT);"); // 13: downtime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"GOODS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Goods entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String goodscode = entity.getGoodscode();
        if (goodscode != null) {
            stmt.bindString(2, goodscode);
        }
 
        String goodsname = entity.getGoodsname();
        if (goodsname != null) {
            stmt.bindString(3, goodsname);
        }
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(4, barcode);
        }
 
        String simbarcode = entity.getSimbarcode();
        if (simbarcode != null) {
            stmt.bindString(5, simbarcode);
        }
 
        String colorid = entity.getColorid();
        if (colorid != null) {
            stmt.bindString(6, colorid);
        }
 
        String colorcode = entity.getColorcode();
        if (colorcode != null) {
            stmt.bindString(7, colorcode);
        }
 
        String colorname = entity.getColorname();
        if (colorname != null) {
            stmt.bindString(8, colorname);
        }
 
        String sizeid = entity.getSizeid();
        if (sizeid != null) {
            stmt.bindString(9, sizeid);
        }
 
        String sizecode = entity.getSizecode();
        if (sizecode != null) {
            stmt.bindString(10, sizecode);
        }
 
        String sizename = entity.getSizename();
        if (sizename != null) {
            stmt.bindString(11, sizename);
        }
        stmt.bindLong(12, entity.getStockqty());
        stmt.bindDouble(13, entity.getPrice());
 
        String downtime = entity.getDowntime();
        if (downtime != null) {
            stmt.bindString(14, downtime);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Goods entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String goodscode = entity.getGoodscode();
        if (goodscode != null) {
            stmt.bindString(2, goodscode);
        }
 
        String goodsname = entity.getGoodsname();
        if (goodsname != null) {
            stmt.bindString(3, goodsname);
        }
 
        String barcode = entity.getBarcode();
        if (barcode != null) {
            stmt.bindString(4, barcode);
        }
 
        String simbarcode = entity.getSimbarcode();
        if (simbarcode != null) {
            stmt.bindString(5, simbarcode);
        }
 
        String colorid = entity.getColorid();
        if (colorid != null) {
            stmt.bindString(6, colorid);
        }
 
        String colorcode = entity.getColorcode();
        if (colorcode != null) {
            stmt.bindString(7, colorcode);
        }
 
        String colorname = entity.getColorname();
        if (colorname != null) {
            stmt.bindString(8, colorname);
        }
 
        String sizeid = entity.getSizeid();
        if (sizeid != null) {
            stmt.bindString(9, sizeid);
        }
 
        String sizecode = entity.getSizecode();
        if (sizecode != null) {
            stmt.bindString(10, sizecode);
        }
 
        String sizename = entity.getSizename();
        if (sizename != null) {
            stmt.bindString(11, sizename);
        }
        stmt.bindLong(12, entity.getStockqty());
        stmt.bindDouble(13, entity.getPrice());
 
        String downtime = entity.getDowntime();
        if (downtime != null) {
            stmt.bindString(14, downtime);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Goods readEntity(Cursor cursor, int offset) {
        Goods entity = new Goods( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // goodscode
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // goodsname
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // barcode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // simbarcode
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // colorid
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // colorcode
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // colorname
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // sizeid
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // sizecode
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // sizename
            cursor.getInt(offset + 11), // stockqty
            cursor.getDouble(offset + 12), // price
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13) // downtime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Goods entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setGoodscode(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setGoodsname(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBarcode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setSimbarcode(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setColorid(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setColorcode(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setColorname(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSizeid(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setSizecode(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSizename(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setStockqty(cursor.getInt(offset + 11));
        entity.setPrice(cursor.getDouble(offset + 12));
        entity.setDowntime(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Goods entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Goods entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Goods entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
