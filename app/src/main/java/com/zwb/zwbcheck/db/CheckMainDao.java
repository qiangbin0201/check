package com.zwb.zwbcheck.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zwb.zwbcheck.bean.CheckMain;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CHECK_MAIN".
*/
public class CheckMainDao extends AbstractDao<CheckMain, Long> {

    public static final String TABLENAME = "CHECK_MAIN";

    /**
     * Properties of entity CheckMain.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Billno = new Property(1, String.class, "billno", false, "BILLNO");
        public final static Property Shelf = new Property(2, String.class, "shelf", false, "SHELF");
        public final static Property Qty = new Property(3, long.class, "qty", false, "QTY");
        public final static Property Account = new Property(4, double.class, "account", false, "ACCOUNT");
        public final static Property Remark = new Property(5, String.class, "remark", false, "REMARK");
        public final static Property Billdate = new Property(6, String.class, "billdate", false, "BILLDATE");
        public final static Property Operateperson = new Property(7, String.class, "operateperson", false, "OPERATEPERSON");
        public final static Property Uploadstatus = new Property(8, String.class, "uploadstatus", false, "UPLOADSTATUS");
    }

    private DaoSession daoSession;


    public CheckMainDao(DaoConfig config) {
        super(config);
    }
    
    public CheckMainDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CHECK_MAIN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"BILLNO\" TEXT," + // 1: billno
                "\"SHELF\" TEXT," + // 2: shelf
                "\"QTY\" INTEGER NOT NULL ," + // 3: qty
                "\"ACCOUNT\" REAL NOT NULL ," + // 4: account
                "\"REMARK\" TEXT," + // 5: remark
                "\"BILLDATE\" TEXT," + // 6: billdate
                "\"OPERATEPERSON\" TEXT," + // 7: operateperson
                "\"UPLOADSTATUS\" TEXT);"); // 8: uploadstatus
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CHECK_MAIN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CheckMain entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String billno = entity.getBillno();
        if (billno != null) {
            stmt.bindString(2, billno);
        }
 
        String shelf = entity.getShelf();
        if (shelf != null) {
            stmt.bindString(3, shelf);
        }
        stmt.bindLong(4, entity.getQty());
        stmt.bindDouble(5, entity.getAccount());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(6, remark);
        }
 
        String billdate = entity.getBilldate();
        if (billdate != null) {
            stmt.bindString(7, billdate);
        }
 
        String operateperson = entity.getOperateperson();
        if (operateperson != null) {
            stmt.bindString(8, operateperson);
        }
 
        String uploadstatus = entity.getUploadstatus();
        if (uploadstatus != null) {
            stmt.bindString(9, uploadstatus);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CheckMain entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String billno = entity.getBillno();
        if (billno != null) {
            stmt.bindString(2, billno);
        }
 
        String shelf = entity.getShelf();
        if (shelf != null) {
            stmt.bindString(3, shelf);
        }
        stmt.bindLong(4, entity.getQty());
        stmt.bindDouble(5, entity.getAccount());
 
        String remark = entity.getRemark();
        if (remark != null) {
            stmt.bindString(6, remark);
        }
 
        String billdate = entity.getBilldate();
        if (billdate != null) {
            stmt.bindString(7, billdate);
        }
 
        String operateperson = entity.getOperateperson();
        if (operateperson != null) {
            stmt.bindString(8, operateperson);
        }
 
        String uploadstatus = entity.getUploadstatus();
        if (uploadstatus != null) {
            stmt.bindString(9, uploadstatus);
        }
    }

    @Override
    protected final void attachEntity(CheckMain entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public CheckMain readEntity(Cursor cursor, int offset) {
        CheckMain entity = new CheckMain( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // billno
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // shelf
            cursor.getLong(offset + 3), // qty
            cursor.getDouble(offset + 4), // account
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // remark
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // billdate
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // operateperson
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8) // uploadstatus
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CheckMain entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBillno(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setShelf(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setQty(cursor.getLong(offset + 3));
        entity.setAccount(cursor.getDouble(offset + 4));
        entity.setRemark(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setBilldate(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOperateperson(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUploadstatus(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CheckMain entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CheckMain entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CheckMain entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
